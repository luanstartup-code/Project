#!/usr/bin/env python3
"""
üé¨ CineAI - Configurador de Produ√ß√£o
Configura√ß√£o autom√°tica com suas chaves de API
"""

import os
import sys
from pathlib import Path

def print_banner():
    print("""
üé¨ =====================================
   CineAI - AI Video Studio Platform
   Configurador de Produ√ß√£o
=====================================
    """)

def create_production_env():
    """Criar arquivo .env com configura√ß√µes de produ√ß√£o"""
    env_content = """# üé¨ CineAI - AI Video Studio Platform
# Configura√ß√µes de Produ√ß√£o

# ‚öôÔ∏è Configura√ß√µes B√°sicas
FLASK_ENV=production
SECRET_KEY=cineai-secret-key-production-2024-ultra-secure
JWT_SECRET_KEY=cineai-jwt-secret-key-production-2024-ultra-secure
PORT=5000
DATABASE_URL=sqlite:///video_generator.db

# üë§ Administrador
ADMIN_EMAIL=admin@cineai.com
ADMIN_PASSWORD=CineAI2024!Admin

# ü§ñ APIs de Intelig√™ncia Artificial
# OpenAI (Sistema Principal)
OPENAI_API_KEY=sk-proj-YOUR_OPENAI_KEY_HERE
OPENAI_MODEL=gpt-4
OPENAI_MAX_TOKENS=4000
OPENAI_TEMPERATURE=0.7

# Google Gemini (Backup)
GEMINI_API_KEY=AIza_YOUR_GEMINI_KEY_HERE
GEMINI_MODEL=gemini-pro
GEMINI_MAX_TOKENS=4000
GEMINI_TEMPERATURE=0.7

# üé≠ HeyGen (Cria√ß√£o de Avatares)
HEYGEN_API_KEY=YOUR_HEYGEN_KEY_HERE
HEYGEN_MODEL=heygen-v1
HEYGEN_AVATAR_QUALITY=high

# üé¨ Runway ML (Gera√ß√£o de V√≠deos)
RUNWAY_API_KEY=key_YOUR_RUNWAY_KEY_HERE
RUNWAY_MODEL=gen-3
RUNWAY_QUALITY=high

# üîä ElevenLabs (Text-to-Speech)
ELEVENLABS_API_KEY=sk_YOUR_ELEVENLABS_KEY_HERE
ELEVENLABS_VOICE_ID_MALE=21m00Tcm4TlvDq8ikWAM
ELEVENLABS_VOICE_ID_FEMALE=EXAVITQu4vr4xnSDxMaL
ELEVENLABS_STABILITY=0.5

# ‚öôÔ∏è Configura√ß√µes do Sistema
MAX_FILE_SIZE=100MB
ALLOWED_EXTENSIONS=jpg,jpeg,png,mp4,mov,avi
STORAGE_LOCAL_PATH=src/static/assets

# üåê URLs de Produ√ß√£o
REACT_APP_API_URL=https://cineai.render.com
FRONTEND_URL=https://cineai.vercel.app
CORS_ORIGINS=https://cineai.vercel.app,http://localhost:3000

# üîê Configura√ß√µes de Seguran√ßa
CORS_SUPPORTS_CREDENTIALS=true
SESSION_COOKIE_SECURE=true
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=None
"""
    
    with open('.env', 'w') as f:
        f.write(env_content)

def create_env_example():
    """Criar arquivo .env.example para refer√™ncia"""
    env_example_content = """# üé¨ CineAI - AI Video Studio Platform
# Arquivo de exemplo - N√ÉO commitar o .env real

# ‚öôÔ∏è Configura√ß√µes B√°sicas
FLASK_ENV=production
SECRET_KEY=sua_chave_secreta_aqui
JWT_SECRET_KEY=sua_chave_jwt_aqui
PORT=5000
DATABASE_URL=sqlite:///video_generator.db

# üë§ Administrador
ADMIN_EMAIL=admin@cineai.com
ADMIN_PASSWORD=sua_senha_admin

# ü§ñ APIs de IA
OPENAI_API_KEY=sk-proj-sua_chave_openai
GEMINI_API_KEY=AIza_sua_chave_gemini
HEYGEN_API_KEY=sua_chave_heygen
RUNWAY_API_KEY=key_sua_chave_runway
ELEVENLABS_API_KEY=sk_sua_chave_elevenlabs

# üåê URLs
REACT_APP_API_URL=https://seu-backend.render.com
FRONTEND_URL=https://seu-frontend.vercel.app
CORS_ORIGINS=https://seu-frontend.vercel.app
"""
    
    with open('.env.example', 'w') as f:
        f.write(env_example_content)

def update_gitignore():
    """Atualizar .gitignore para produ√ß√£o"""
    gitignore_content = """# üé¨ CineAI - Arquivos ignorados

# Ambiente e configura√ß√µes sens√≠veis
.env
.env.local
.env.production
instance/
*.db
*.sqlite

# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/
env.bak/
venv.bak/

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/

# Node.js (Frontend)
frontend/node_modules/
frontend/npm-debug.log*
frontend/yarn-debug.log*
frontend/yarn-error.log*
frontend/.pnp
frontend/.pnp.js
frontend/coverage/
frontend/build/
frontend/.env.local
frontend/.env.development.local
frontend/.env.test.local
frontend/.env.production.local

# Runtime
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Dependency directories
node_modules/

# Temporary folders
tmp/
temp/
"""
    
    with open('.gitignore', 'w') as f:
        f.write(gitignore_content)

def main():
    print_banner()
    
    print("üöÄ Configurando ambiente de produ√ß√£o...")
    
    # Criar arquivos de ambiente
    create_production_env()
    print("‚úÖ Arquivo .env criado com chaves de produ√ß√£o")
    
    create_env_example()
    print("‚úÖ Arquivo .env.example criado")
    
    update_gitignore()
    print("‚úÖ .gitignore atualizado")
    
    print(f"""
üéâ Configura√ß√£o de produ√ß√£o conclu√≠da!

üìã Pr√≥ximos passos:
   1. Commit e push para GitHub
   2. Deploy frontend no Vercel (cineai.vercel.app)
   3. Deploy backend no Render (cineai.render.com)
   4. Configurar vari√°veis de ambiente nos servi√ßos

üåê URLs configuradas:
   ‚Ä¢ Frontend: https://cineai.vercel.app
   ‚Ä¢ Backend: https://cineai.render.com

üîê Credenciais de admin:
   ‚Ä¢ Email: admin@cineai.com
   ‚Ä¢ Senha: CineAI2024!Admin

‚ö†Ô∏è  IMPORTANTE: 
   ‚Ä¢ O arquivo .env foi criado mas N√ÉO ser√° commitado
   ‚Ä¢ Configure as vari√°veis manualmente no Vercel e Render
   ‚Ä¢ Use .env.example como refer√™ncia
    """)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Configura√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")